# Generated by Django 5.1.3 on 2024-11-27 02:26

import django.core.validators
import django.db.models.deletion
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("geography", "0011_alter_gps_latitude_alter_gps_longitude"),
        ("specimens", "0001_initial"),
        ("taxonomy", "0010_alter_species_mona_alter_species_p3_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="SpecimenRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_modified", models.DateTimeField(auto_now=True)),
                (
                    "usi",
                    models.CharField(
                        help_text="Enter the specimen's unique identifier number",
                        max_length=15,
                        verbose_name="Unique Specimen Identifier",
                    ),
                ),
                (
                    "determined_year",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Enter the year the determination was made",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(2005),
                            django.core.validators.MaxValueValidator(2100),
                        ],
                    ),
                ),
                (
                    "sex",
                    models.CharField(
                        choices=[
                            ("male", "male"),
                            ("female", "female"),
                            ("unknown", "unknown"),
                        ],
                        default="unknown",
                        help_text="Select the specimen's sex",
                        max_length=10,
                    ),
                ),
                (
                    "stage",
                    models.CharField(
                        choices=[
                            ("egg", "egg"),
                            ("larva", "larva"),
                            ("nymph", "nymph"),
                            ("pupa", "pupa"),
                            ("adult", "adult"),
                        ],
                        default="adult",
                        help_text="Select the specimen's stage",
                        max_length=10,
                    ),
                ),
                (
                    "preparation",
                    models.CharField(
                        choices=[
                            ("spread", "spread"),
                            ("pinned", "pinned"),
                            ("minuten", "minuten"),
                            ("pointed", "pointed"),
                            ("envelope", "envelope"),
                            ("container", "container"),
                            ("alcohol", "alcohol"),
                        ],
                        default="spread",
                        help_text="Select the specimen's preparation type",
                        max_length=15,
                    ),
                ),
                (
                    "preparation_date",
                    models.DateField(
                        blank=True, help_text="Enter the preparation date", null=True
                    ),
                ),
                (
                    "labels_printed",
                    models.BooleanField(
                        help_text="Are labels printed for the specimen?", null=True
                    ),
                ),
                (
                    "labeled",
                    models.BooleanField(
                        help_text="Is the specimen labeled?", null=True
                    ),
                ),
                (
                    "photographed",
                    models.BooleanField(
                        help_text="Is the specimen photographed?", null=True
                    ),
                ),
                (
                    "day",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Enter the day the specimen was collected, if known",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(31),
                        ],
                    ),
                ),
                (
                    "month",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("January", "January"),
                            ("February", "February"),
                            ("March", "March"),
                            ("April", "April"),
                            ("May", "May"),
                            ("June", "June"),
                            ("July", "July"),
                            ("August", "August"),
                            ("September", "September"),
                            ("October", "October"),
                            ("November", "November"),
                            ("December", "December"),
                        ],
                        default="",
                        help_text="Select the month the specimen was collected, if known",
                        max_length=10,
                    ),
                ),
                (
                    "year",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Enter the year the specimen was collected, if known",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(2005),
                            django.core.validators.MaxValueValidator(2100),
                        ],
                    ),
                ),
                (
                    "method",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Net", "Net"),
                            ("Reared", "Reared"),
                            ("Trap", "Trap"),
                            ("UV trap", "UV trap"),
                            ("Light", "Light"),
                            ("MV light", "MV light"),
                            ("MV light sheet", "MV light sheet"),
                            ("UV light", "UV light"),
                            ("UV light sheet", "UV light sheet"),
                            ("UV/MV light sheet", "UV/MV light sheet"),
                            ("UV/MV/LED light sheet", "UV/MV/LED light sheet"),
                            ("Bait", "Bait"),
                            ("By hand", "By hand"),
                            ("Sweep", "Sweep"),
                        ],
                        default="",
                        help_text="Select the method used to collected the specimen",
                        max_length=50,
                    ),
                ),
                (
                    "weather",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Enter the weather conditions during the specimen's collection",
                        max_length=100,
                    ),
                ),
                (
                    "temperature",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Enter the temperature (F) during the specimen's collection if outdoors",
                        max_digits=4,
                        null=True,
                    ),
                ),
                (
                    "time_of_day",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Enter the approximate time of the specimen's collection",
                        max_length=50,
                    ),
                ),
                (
                    "habitat",
                    wagtail.fields.RichTextField(
                        blank=True,
                        default="",
                        help_text="Enter habitat details where the specimen was collected",
                    ),
                ),
                (
                    "notes",
                    wagtail.fields.RichTextField(
                        blank=True,
                        default="",
                        help_text="Enter any other notes about the specimen",
                    ),
                ),
                (
                    "collecting_trip",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the collecting trip on which the specimen was collected",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="specimen_records",
                        to="geography.collectingtrip",
                    ),
                ),
                (
                    "collector",
                    models.ManyToManyField(
                        help_text="Select the specimen's collector(s)",
                        related_name="specimen_collectors",
                        to="specimens.person",
                        verbose_name="Collector(s)",
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the country in which the specimen was collected",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="specimen_records",
                        to="geography.country",
                    ),
                ),
                (
                    "county",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the county in which the specimen was collected",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="specimen_records",
                        to="geography.county",
                    ),
                ),
                (
                    "determiner",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the person who determined the specimen",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="specimen_determiners",
                        to="specimens.person",
                    ),
                ),
                (
                    "family",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the specimen's family (if known)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="taxonomy.family",
                    ),
                ),
                (
                    "genus",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the specimen's genus (if known)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="taxonomy.genus",
                    ),
                ),
                (
                    "gps",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the GPS coordinates at which the specimen was collected",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="specimen_records",
                        to="geography.gps",
                    ),
                ),
                (
                    "locality",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the locality at which the specimen was collected",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="specimen_records",
                        to="geography.locality",
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the specimen's order (if known)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="taxonomy.order",
                    ),
                ),
                (
                    "preparer",
                    models.ForeignKey(
                        help_text="Select the person who prepared the specimen",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="specimen_preparers",
                        to="specimens.person",
                    ),
                ),
                (
                    "species",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the specimen's species (if known)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="taxonomy.species",
                    ),
                ),
                (
                    "state",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the state in which the specimen was collected",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="specimen_records",
                        to="geography.state",
                    ),
                ),
                (
                    "subfamily",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the specimen's subfamily (if known)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="taxonomy.subfamily",
                    ),
                ),
                (
                    "subspecies",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the specimen's subspecies (if known)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="taxonomy.subspecies",
                    ),
                ),
                (
                    "tribe",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the specimen's tribe (if known)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="taxonomy.tribe",
                    ),
                ),
            ],
            options={
                "ordering": ["usi"],
            },
        ),
    ]
